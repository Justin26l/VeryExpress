// read package.json and get version
import fs from "fs";
import path from 'path';
import { compilerOptions } from "./types/types";

function getPackageInfo() :{
    version: string,
    author: string,
} {
    const packageJson = fs.readFileSync("./package.json", "utf8");
    const packageJsonObject = JSON.parse(packageJson);

    return {
        version: packageJsonObject.dependencies['very-express']?.replace('^','') || "[unknown version]",
        author: packageJsonObject.author || "justin26l",
    };
}

export const relativePath = (fromPath: string, toPath: string): string => {
    return path.relative(fromPath, toPath).replace(/\\/g, '/');
};

export function getGenaratorHeaderComment(comment?:string) :string{
    const packageInfo = getPackageInfo();
    return`/* eslint-disable */
/**
 * Generated by veryExpress@${packageInfo.version}
 * DO NOT MODIFY MANUALLY. Instead, modify the JsonSchema file,
 * and run veryExpress to regenerate this file.
 * 
 * author: ${packageInfo.author}
 * version: ${packageInfo.version}
 * comment: ${comment || ""}
 */
`;

}

export function cleanXcustomValue(
    schemaObj:{[key:string]:any},
    additionalKeyArr?: string[]
) : { [key:string] : any } 
{
    let obj = Object.assign(schemaObj);
    // filtr out key start with 'x-' and additionalKeyArr recursively
    for(const key in obj){
        if(key.startsWith("x-")){
            delete obj[key];
        }
        else if(additionalKeyArr && additionalKeyArr.includes(key)){
            delete obj[key];
        }
        else if(typeof obj[key] === "object"){
            cleanXcustomValue(obj[key], additionalKeyArr);
        }
    }
    return obj;
}

export const defaultCompilerOptions : compilerOptions = {
    headerComment: getGenaratorHeaderComment(),
    modelsTemplate: `{{headerComment}}
import { Document, Schema, Model, model } from "mongoose";
import { {{interfaceName}} } from "<<interfacePath>>";

const schemaConfig = {{mongooseSchema}};

export interface {{documentName}}Document extends {{interfaceName}}, Document<string> {};
export const {{documentName}}Schema: Schema = new Schema(schemaConfig);
export const {{documentName}}Model: Model<{{documentName}}Document> = model<{{documentName}}Document>("{{documentName}}", {{documentName}}Schema);
`,
};

export default {
    getGenaratorHeaderComment,
    defaultCompilerOptions,
    relativePath,
    cleanXcustomValue,
};
